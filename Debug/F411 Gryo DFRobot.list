
F411 Gryo DFRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080040bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080040bc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000979b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abe  00000000  00000000  000297d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158cc  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1c0  00000000  00000000  0004193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084992  00000000  00000000  0004bafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d048e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb0  00000000  00000000  000d04e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004068 	.word	0x08004068

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004068 	.word	0x08004068

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_DMA_Init+0x4c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <MX_DMA_Init+0x4c>)
 8000d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_DMA_Init+0x4c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	203a      	movs	r0, #58	; 0x3a
 8000d40:	f000 fe4f 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d44:	203a      	movs	r0, #58	; 0x3a
 8000d46:	f000 fe68 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2046      	movs	r0, #70	; 0x46
 8000d50:	f000 fe47 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d54:	2046      	movs	r0, #70	; 0x46
 8000d56:	f000 fe60 	bl	8001a1a <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_GPIO_Init+0x4c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fcc4 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f80e 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f7ff ffd0 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc8:	f7ff ffa6 	bl	8000d18 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000dcc:	f000 f902 	bl	8000fd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  WT61PC_init(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <main+0x24>)
 8000dd2:	f000 fa09 	bl	80011e8 <WT61PC_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WT61PC_rx_restart();
 8000dd6:	f000 fc51 	bl	800167c <WT61PC_rx_restart>
 8000dda:	e7fc      	b.n	8000dd6 <main+0x1e>
 8000ddc:	20000028 	.word	0x20000028

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	; 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f932 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <SystemClock_Config+0xc8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <SystemClock_Config+0xc8>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <SystemClock_Config+0xc8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <SystemClock_Config+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a20      	ldr	r2, [pc, #128]	; (8000eac <SystemClock_Config+0xcc>)
 8000e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <SystemClock_Config+0xcc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000e50:	230c      	movs	r3, #12
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fb79 	bl	800255c <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e70:	f000 f829 	bl	8000ec6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fddb 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e9c:	f000 f813 	bl	8000ec6 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3750      	adds	r7, #80	; 0x50
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	WT61PC_rx_callback(huart);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f9a9 	bl	8001210 <WT61PC_rx_callback>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eca:	b672      	cpsid	i
}
 8000ecc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ece:	e7fe      	b.n	8000ece <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 fc3e 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <USART1_IRQHandler+0x10>)
 8000f7a:	f001 ffc5 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000028 	.word	0x20000028

08000f88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA2_Stream2_IRQHandler+0x10>)
 8000f8e:	f000 fef7 	bl	8001d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000006c 	.word	0x2000006c

08000f9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA2_Stream7_IRQHandler+0x10>)
 8000fa2:	f000 feed 	bl	8001d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000cc 	.word	0x200000cc

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_USART1_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 800100c:	f001 fefe 	bl	8002e0c <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f7ff ff56 	bl	8000ec6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000028 	.word	0x20000028
 8001024:	40011000 	.word	0x40011000

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <HAL_UART_MspInit+0x150>)
 8001046:	4293      	cmp	r3, r2
 8001048:	f040 8091 	bne.w	800116e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <HAL_UART_MspInit+0x154>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a49      	ldr	r2, [pc, #292]	; (800117c <HAL_UART_MspInit+0x154>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_UART_MspInit+0x154>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_UART_MspInit+0x154>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a42      	ldr	r2, [pc, #264]	; (800117c <HAL_UART_MspInit+0x154>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_UART_MspInit+0x154>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001084:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4837      	ldr	r0, [pc, #220]	; (8001180 <HAL_UART_MspInit+0x158>)
 80010a2:	f001 f8d7 	bl	8002254 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010a8:	4a37      	ldr	r2, [pc, #220]	; (8001188 <HAL_UART_MspInit+0x160>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010e8:	f000 fcb2 	bl	8001a50 <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010f2:	f7ff fee8 	bl	8000ec6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_UART_MspInit+0x15c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_UART_MspInit+0x164>)
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <HAL_UART_MspInit+0x168>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_UART_MspInit+0x164>)
 800110a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_UART_MspInit+0x164>)
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_UART_MspInit+0x164>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_UART_MspInit+0x164>)
 800111e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001122:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0x164>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x164>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_UART_MspInit+0x164>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x164>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_UART_MspInit+0x164>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <HAL_UART_MspInit+0x164>)
 8001144:	f000 fc84 	bl	8001a50 <HAL_DMA_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800114e:	f7ff feba 	bl	8000ec6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_UART_MspInit+0x164>)
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_UART_MspInit+0x164>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2025      	movs	r0, #37	; 0x25
 8001164:	f000 fc3d 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001168:	2025      	movs	r0, #37	; 0x25
 800116a:	f000 fc56 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40011000 	.word	0x40011000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000
 8001184:	2000006c 	.word	0x2000006c
 8001188:	40026440 	.word	0x40026440
 800118c:	200000cc 	.word	0x200000cc
 8001190:	400264b8 	.word	0x400264b8

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011be:	f7ff fef7 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f002 ff25 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fdf7 	bl	8000db8 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011d8:	080040b0 	.word	0x080040b0
  ldr r2, =_sbss
 80011dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e0:	20000188 	.word	0x20000188

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <WT61PC_init>:
static int16_t to_i16(uint8_t dataL, uint8_t dataH);

WT61PC_t imu;

//call before loop, set rx to DMA normal, enable global interrupt
void WT61PC_init(UART_HandleTypeDef* huart){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, &imu.rx_byte, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	4905      	ldr	r1, [pc, #20]	; (8001208 <WT61PC_init+0x20>)
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f001 fe56 	bl	8002ea6 <HAL_UART_Receive_DMA>

	imu.huart = huart;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <WT61PC_init+0x24>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000013c 	.word	0x2000013c
 800120c:	2000012c 	.word	0x2000012c

08001210 <WT61PC_rx_callback>:


//call in UART RX Cplt Callback
void WT61PC_rx_callback(UART_HandleTypeDef* huart){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(huart->Instance != imu.huart->Instance) return;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <WT61PC_rx_callback+0x268>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	f040 8219 	bne.w	800165a <WT61PC_rx_callback+0x44a>

	HAL_UART_Receive_DMA(huart, &imu.rx_byte, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	4994      	ldr	r1, [pc, #592]	; (800147c <WT61PC_rx_callback+0x26c>)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f001 fe3a 	bl	8002ea6 <HAL_UART_Receive_DMA>

	if(imu.rx_ptr == 11){	//frame complete
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001234:	7bdb      	ldrb	r3, [r3, #15]
 8001236:	2b0b      	cmp	r3, #11
 8001238:	f040 81f8 	bne.w	800162c <WT61PC_rx_callback+0x41c>
		imu.rx_ptr = 0;
 800123c:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <WT61PC_rx_callback+0x268>)
 800123e:	2200      	movs	r2, #0
 8001240:	73da      	strb	r2, [r3, #15]

		//checksum calculation wrong
		if(imu.rx_frame[10] != WT61PC_checksum_calc()) return;
 8001242:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001244:	7b9c      	ldrb	r4, [r3, #14]
 8001246:	f000 fa47 	bl	80016d8 <WT61PC_checksum_calc>
 800124a:	4603      	mov	r3, r0
 800124c:	429c      	cmp	r4, r3
 800124e:	f040 8206 	bne.w	800165e <WT61PC_rx_callback+0x44e>

		if(imu.rx_frame[1] == 0x51){	//acceleration
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001254:	795b      	ldrb	r3, [r3, #5]
 8001256:	2b51      	cmp	r3, #81	; 0x51
 8001258:	f040 8084 	bne.w	8001364 <WT61PC_rx_callback+0x154>
			imu.acceleration.x = to_i16(imu.rx_frame[2], imu.rx_frame[3]) * 16.0 / 32768;
 800125c:	4b86      	ldr	r3, [pc, #536]	; (8001478 <WT61PC_rx_callback+0x268>)
 800125e:	799b      	ldrb	r3, [r3, #6]
 8001260:	4a85      	ldr	r2, [pc, #532]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001262:	79d2      	ldrb	r2, [r2, #7]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fa56 	bl	8001718 <to_i16>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f904 	bl	800047c <__aeabi_i2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <WT61PC_rx_callback+0x270>)
 800127a:	f7ff f969 	bl	8000550 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <WT61PC_rx_callback+0x274>)
 800128c:	f7ff fa8a 	bl	80007a4 <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fb6c 	bl	8000974 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4a76      	ldr	r2, [pc, #472]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012a0:	6153      	str	r3, [r2, #20]
			imu.acceleration.y = to_i16(imu.rx_frame[4], imu.rx_frame[5]) * 16.0 / 32768;
 80012a2:	4b75      	ldr	r3, [pc, #468]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012a4:	7a1b      	ldrb	r3, [r3, #8]
 80012a6:	4a74      	ldr	r2, [pc, #464]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012a8:	7a52      	ldrb	r2, [r2, #9]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fa33 	bl	8001718 <to_i16>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8e1 	bl	800047c <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <WT61PC_rx_callback+0x270>)
 80012c0:	f7ff f946 	bl	8000550 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <WT61PC_rx_callback+0x274>)
 80012d2:	f7ff fa67 	bl	80007a4 <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fb49 	bl	8000974 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012e6:	6193      	str	r3, [r2, #24]
			imu.acceleration.z = to_i16(imu.rx_frame[6], imu.rx_frame[7]) * 16.0 / 32768;
 80012e8:	4b63      	ldr	r3, [pc, #396]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012ea:	7a9b      	ldrb	r3, [r3, #10]
 80012ec:	4a62      	ldr	r2, [pc, #392]	; (8001478 <WT61PC_rx_callback+0x268>)
 80012ee:	7ad2      	ldrb	r2, [r2, #11]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fa10 	bl	8001718 <to_i16>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8be 	bl	800047c <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <WT61PC_rx_callback+0x270>)
 8001306:	f7ff f923 	bl	8000550 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <WT61PC_rx_callback+0x274>)
 8001318:	f7ff fa44 	bl	80007a4 <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb26 	bl	8000974 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	4a53      	ldr	r2, [pc, #332]	; (8001478 <WT61PC_rx_callback+0x268>)
 800132c:	61d3      	str	r3, [r2, #28]

			imu.temprature = to_i16(imu.rx_frame[8], imu.rx_frame[9]) / 100.0;
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	4a51      	ldr	r2, [pc, #324]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001334:	7b52      	ldrb	r2, [r2, #13]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f9ed 	bl	8001718 <to_i16>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f89b 	bl	800047c <__aeabi_i2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <WT61PC_rx_callback+0x278>)
 800134c:	f7ff fa2a 	bl	80007a4 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fb0c 	bl	8000974 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	e15e      	b.n	8001622 <WT61PC_rx_callback+0x412>
		}
		else if(imu.rx_frame[1] == 0x52){		//angular velocity
 8001364:	4b44      	ldr	r3, [pc, #272]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001366:	795b      	ldrb	r3, [r3, #5]
 8001368:	2b52      	cmp	r3, #82	; 0x52
 800136a:	f040 8091 	bne.w	8001490 <WT61PC_rx_callback+0x280>
			imu.angle_vel.x = to_i16(imu.rx_frame[2], imu.rx_frame[3]) * 2000.0 / 32768;
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001370:	799b      	ldrb	r3, [r3, #6]
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001374:	79d2      	ldrb	r2, [r2, #7]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f9cd 	bl	8001718 <to_i16>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f87b 	bl	800047c <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <WT61PC_rx_callback+0x27c>)
 800138c:	f7ff f8e0 	bl	8000550 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <WT61PC_rx_callback+0x274>)
 800139e:	f7ff fa01 	bl	80007a4 <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fae3 	bl	8000974 <__aeabi_d2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a31      	ldr	r2, [pc, #196]	; (8001478 <WT61PC_rx_callback+0x268>)
 80013b2:	62d3      	str	r3, [r2, #44]	; 0x2c
			imu.angle_vel.y = to_i16(imu.rx_frame[4], imu.rx_frame[5]) * 2000.0 / 32768;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <WT61PC_rx_callback+0x268>)
 80013b6:	7a1b      	ldrb	r3, [r3, #8]
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <WT61PC_rx_callback+0x268>)
 80013ba:	7a52      	ldrb	r2, [r2, #9]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f9aa 	bl	8001718 <to_i16>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f858 	bl	800047c <__aeabi_i2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <WT61PC_rx_callback+0x27c>)
 80013d2:	f7ff f8bd 	bl	8000550 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <WT61PC_rx_callback+0x274>)
 80013e4:	f7ff f9de 	bl	80007a4 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fac0 	bl	8000974 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <WT61PC_rx_callback+0x268>)
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
			imu.angle_vel.z = to_i16(imu.rx_frame[6], imu.rx_frame[7]) * 2000.0 / 32768;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <WT61PC_rx_callback+0x268>)
 80013fc:	7a9b      	ldrb	r3, [r3, #10]
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001400:	7ad2      	ldrb	r2, [r2, #11]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f987 	bl	8001718 <to_i16>
 800140a:	4603      	mov	r3, r0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f835 	bl	800047c <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <WT61PC_rx_callback+0x27c>)
 8001418:	f7ff f89a 	bl	8000550 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <WT61PC_rx_callback+0x274>)
 800142a:	f7ff f9bb 	bl	80007a4 <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fa9d 	bl	8000974 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <WT61PC_rx_callback+0x268>)
 800143e:	6353      	str	r3, [r2, #52]	; 0x34

			imu.voltage = to_i16(imu.rx_frame[8], imu.rx_frame[9]) / 100.0;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001442:	7b1b      	ldrb	r3, [r3, #12]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001446:	7b52      	ldrb	r2, [r2, #13]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f964 	bl	8001718 <to_i16>
 8001450:	4603      	mov	r3, r0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f812 	bl	800047c <__aeabi_i2d>
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <WT61PC_rx_callback+0x278>)
 800145e:	f7ff f9a1 	bl	80007a4 <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fa83 	bl	8000974 <__aeabi_d2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <WT61PC_rx_callback+0x268>)
 8001472:	6493      	str	r3, [r2, #72]	; 0x48
 8001474:	e0d5      	b.n	8001622 <WT61PC_rx_callback+0x412>
 8001476:	bf00      	nop
 8001478:	2000012c 	.word	0x2000012c
 800147c:	2000013c 	.word	0x2000013c
 8001480:	40300000 	.word	0x40300000
 8001484:	40e00000 	.word	0x40e00000
 8001488:	40590000 	.word	0x40590000
 800148c:	409f4000 	.word	0x409f4000

		}
		else if(imu.rx_frame[1] == 0x53){		//angular position
 8001490:	4b76      	ldr	r3, [pc, #472]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001492:	795b      	ldrb	r3, [r3, #5]
 8001494:	2b53      	cmp	r3, #83	; 0x53
 8001496:	d176      	bne.n	8001586 <WT61PC_rx_callback+0x376>
			imu.angle_pos.x = to_i16(imu.rx_frame[2], imu.rx_frame[3]) * 180.0 / 32768;
 8001498:	4b74      	ldr	r3, [pc, #464]	; (800166c <WT61PC_rx_callback+0x45c>)
 800149a:	799b      	ldrb	r3, [r3, #6]
 800149c:	4a73      	ldr	r2, [pc, #460]	; (800166c <WT61PC_rx_callback+0x45c>)
 800149e:	79d2      	ldrb	r2, [r2, #7]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f938 	bl	8001718 <to_i16>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffe6 	bl	800047c <__aeabi_i2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <WT61PC_rx_callback+0x460>)
 80014b6:	f7ff f84b 	bl	8000550 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <WT61PC_rx_callback+0x464>)
 80014c8:	f7ff f96c 	bl	80007a4 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fa4e 	bl	8000974 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a64      	ldr	r2, [pc, #400]	; (800166c <WT61PC_rx_callback+0x45c>)
 80014dc:	6213      	str	r3, [r2, #32]
			imu.angle_pos.y = to_i16(imu.rx_frame[4], imu.rx_frame[5]) * 180.0 / 32768;
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <WT61PC_rx_callback+0x45c>)
 80014e0:	7a1b      	ldrb	r3, [r3, #8]
 80014e2:	4a62      	ldr	r2, [pc, #392]	; (800166c <WT61PC_rx_callback+0x45c>)
 80014e4:	7a52      	ldrb	r2, [r2, #9]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f915 	bl	8001718 <to_i16>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ffc3 	bl	800047c <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <WT61PC_rx_callback+0x460>)
 80014fc:	f7ff f828 	bl	8000550 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <WT61PC_rx_callback+0x464>)
 800150e:	f7ff f949 	bl	80007a4 <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fa2b 	bl	8000974 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001522:	6253      	str	r3, [r2, #36]	; 0x24
			imu.angle_pos.z = to_i16(imu.rx_frame[6], imu.rx_frame[7]) * 180.0 / 32768;
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001526:	7a9b      	ldrb	r3, [r3, #10]
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <WT61PC_rx_callback+0x45c>)
 800152a:	7ad2      	ldrb	r2, [r2, #11]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f8f2 	bl	8001718 <to_i16>
 8001534:	4603      	mov	r3, r0
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffa0 	bl	800047c <__aeabi_i2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <WT61PC_rx_callback+0x460>)
 8001542:	f7ff f805 	bl	8000550 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b48      	ldr	r3, [pc, #288]	; (8001674 <WT61PC_rx_callback+0x464>)
 8001554:	f7ff f926 	bl	80007a4 <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fa08 	bl	8000974 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	4a41      	ldr	r2, [pc, #260]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001568:	6293      	str	r3, [r2, #40]	; 0x28

			imu.version = to_i16(imu.rx_frame[8], imu.rx_frame[9]);
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <WT61PC_rx_callback+0x45c>)
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001570:	7b52      	ldrb	r2, [r2, #13]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f8cf 	bl	8001718 <to_i16>
 800157a:	4603      	mov	r3, r0
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001580:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8001584:	e04d      	b.n	8001622 <WT61PC_rx_callback+0x412>
		}
		else if(imu.rx_frame[1] == 0x54){		//magnetic field
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	2b54      	cmp	r3, #84	; 0x54
 800158c:	d149      	bne.n	8001622 <WT61PC_rx_callback+0x412>
			imu.magnetic_field.x = to_i16(imu.rx_frame[2], imu.rx_frame[3]);
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001590:	799b      	ldrb	r3, [r3, #6]
 8001592:	4a36      	ldr	r2, [pc, #216]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001594:	79d2      	ldrb	r2, [r2, #7]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8bd 	bl	8001718 <to_i16>
 800159e:	4603      	mov	r3, r0
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015aa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			imu.magnetic_field.y = to_i16(imu.rx_frame[4], imu.rx_frame[5]);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015b0:	7a1b      	ldrb	r3, [r3, #8]
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015b4:	7a52      	ldrb	r2, [r2, #9]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f8ad 	bl	8001718 <to_i16>
 80015be:	4603      	mov	r3, r0
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015ca:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			imu.magnetic_field.z = to_i16(imu.rx_frame[6], imu.rx_frame[7]);
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015d0:	7a9b      	ldrb	r3, [r3, #10]
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015d4:	7ad2      	ldrb	r2, [r2, #11]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f89d 	bl	8001718 <to_i16>
 80015de:	4603      	mov	r3, r0
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015ea:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			imu.temprature = to_i16(imu.rx_frame[8], imu.rx_frame[9]) / 100.0;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015f0:	7b1b      	ldrb	r3, [r3, #12]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <WT61PC_rx_callback+0x45c>)
 80015f4:	7b52      	ldrb	r2, [r2, #13]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f88d 	bl	8001718 <to_i16>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff3b 	bl	800047c <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <WT61PC_rx_callback+0x468>)
 800160c:	f7ff f8ca 	bl	80007a4 <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff f9ac 	bl	8000974 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
		}

		imu.timestamp = HAL_GetTick();
 8001622:	f000 f8f7 	bl	8001814 <HAL_GetTick>
 8001626:	4603      	mov	r3, r0
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <WT61PC_rx_callback+0x45c>)
 800162a:	6513      	str	r3, [r2, #80]	; 0x50
	}

	//data unsync
	if(imu.rx_ptr == 0 && imu.rx_byte != 0x55) return;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <WT61PC_rx_callback+0x45c>)
 800162e:	7bdb      	ldrb	r3, [r3, #15]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <WT61PC_rx_callback+0x42c>
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001636:	7c1b      	ldrb	r3, [r3, #16]
 8001638:	2b55      	cmp	r3, #85	; 0x55
 800163a:	d112      	bne.n	8001662 <WT61PC_rx_callback+0x452>

	imu.rx_frame[imu.rx_ptr] = imu.rx_byte;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <WT61PC_rx_callback+0x45c>)
 800163e:	7bdb      	ldrb	r3, [r3, #15]
 8001640:	4619      	mov	r1, r3
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001644:	7c1a      	ldrb	r2, [r3, #16]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001648:	440b      	add	r3, r1
 800164a:	711a      	strb	r2, [r3, #4]
	imu.rx_ptr++;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <WT61PC_rx_callback+0x45c>)
 800164e:	7bdb      	ldrb	r3, [r3, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <WT61PC_rx_callback+0x45c>)
 8001656:	73da      	strb	r2, [r3, #15]
 8001658:	e004      	b.n	8001664 <WT61PC_rx_callback+0x454>
	if(huart->Instance != imu.huart->Instance) return;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <WT61PC_rx_callback+0x454>
		if(imu.rx_frame[10] != WT61PC_checksum_calc()) return;
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <WT61PC_rx_callback+0x454>
	if(imu.rx_ptr == 0 && imu.rx_byte != 0x55) return;
 8001662:	bf00      	nop
}
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	2000012c 	.word	0x2000012c
 8001670:	40668000 	.word	0x40668000
 8001674:	40e00000 	.word	0x40e00000
 8001678:	40590000 	.word	0x40590000

0800167c <WT61PC_rx_restart>:

//call in while loop
void WT61PC_rx_restart(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	static int last_restart = 0;

	if(HAL_GetTick() < imu.timestamp + 100) return;
 8001680:	f000 f8c8 	bl	8001814 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <WT61PC_rx_restart+0x4c>)
 8001688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168a:	3364      	adds	r3, #100	; 0x64
 800168c:	429a      	cmp	r2, r3
 800168e:	d316      	bcc.n	80016be <WT61PC_rx_restart+0x42>
	if(HAL_GetTick() < last_restart + 100) return;
 8001690:	f000 f8c0 	bl	8001814 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <WT61PC_rx_restart+0x50>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3364      	adds	r3, #100	; 0x64
 800169c:	429a      	cmp	r2, r3
 800169e:	d310      	bcc.n	80016c2 <WT61PC_rx_restart+0x46>

	last_restart = HAL_GetTick();
 80016a0:	f000 f8b8 	bl	8001814 <HAL_GetTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <WT61PC_rx_restart+0x50>)
 80016aa:	601a      	str	r2, [r3, #0]

	imu.rx_ptr = 0;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <WT61PC_rx_restart+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	73da      	strb	r2, [r3, #15]
	HAL_UART_Receive_DMA(&huart1, &imu.rx_byte, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	4906      	ldr	r1, [pc, #24]	; (80016d0 <WT61PC_rx_restart+0x54>)
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <WT61PC_rx_restart+0x58>)
 80016b8:	f001 fbf5 	bl	8002ea6 <HAL_UART_Receive_DMA>
 80016bc:	e002      	b.n	80016c4 <WT61PC_rx_restart+0x48>
	if(HAL_GetTick() < imu.timestamp + 100) return;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <WT61PC_rx_restart+0x48>
	if(HAL_GetTick() < last_restart + 100) return;
 80016c2:	bf00      	nop
}
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000012c 	.word	0x2000012c
 80016cc:	20000180 	.word	0x20000180
 80016d0:	2000013c 	.word	0x2000013c
 80016d4:	20000028 	.word	0x20000028

080016d8 <WT61PC_checksum_calc>:

static uint8_t WT61PC_checksum_calc(){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
	uint8_t checksum_res = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 10; i++){
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	e00a      	b.n	80016fe <WT61PC_checksum_calc+0x26>
		checksum_res += imu.rx_frame[i];
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <WT61PC_checksum_calc+0x3c>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4413      	add	r3, r2
 80016f6:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 10; i++){
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b09      	cmp	r3, #9
 8001702:	ddf1      	ble.n	80016e8 <WT61PC_checksum_calc+0x10>
	}

	return checksum_res;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000012c 	.word	0x2000012c

08001718 <to_i16>:

static int16_t to_i16(uint8_t dataL, uint8_t dataH){
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	460a      	mov	r2, r1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4613      	mov	r3, r2
 8001726:	71bb      	strb	r3, [r7, #6]
	int16_t data = ((dataH << 8) | dataL);
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	81fb      	strh	r3, [r7, #14]

	return data;
 8001736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f92b 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	200f      	movs	r0, #15
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fba8 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f943 	bl	8001a36 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f90b 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	20000184 	.word	0x20000184

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000184 	.word	0x20000184

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff3e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff31 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff feda 	bl	8001814 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e099      	b.n	8001ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8c:	e00f      	b.n	8001aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8e:	f7ff fec1 	bl	8001814 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d908      	bls.n	8001aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e078      	b.n	8001ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e8      	bne.n	8001a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_DMA_Init+0x158>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4313      	orrs	r3, r2
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f023 0307 	bic.w	r3, r3, #7
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d117      	bne.n	8001b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fb01 	bl	800215c <DMA_CheckFifoParam>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e016      	b.n	8001ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fab8 	bl	80020f0 <DMA_CalcBaseAndBitshift>
 8001b80:	4603      	mov	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	f010803f 	.word	0xf010803f

08001bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Start_IT+0x26>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e040      	b.n	8001c54 <HAL_DMA_Start_IT+0xa8>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12f      	bne.n	8001c46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fa4a 	bl	8002094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0216 	orr.w	r2, r2, #22
 8001c1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0208 	orr.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e005      	b.n	8001c52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c6a:	f7ff fdd3 	bl	8001814 <HAL_GetTick>
 8001c6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e052      	b.n	8001d34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0216 	bic.w	r2, r2, #22
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_DMA_Abort+0x62>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0208 	bic.w	r2, r2, #8
 8001ccc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	e013      	b.n	8001d08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce0:	f7ff fd98 	bl	8001814 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d90c      	bls.n	8001d08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e015      	b.n	8001d34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1e4      	bne.n	8001ce0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	223f      	movs	r2, #63	; 0x3f
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d004      	beq.n	8001d5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00c      	b.n	8001d74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d8c:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <HAL_DMA_IRQHandler+0x248>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a8e      	ldr	r2, [pc, #568]	; (8001fcc <HAL_DMA_IRQHandler+0x24c>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0a9b      	lsrs	r3, r3, #10
 8001d98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	2208      	movs	r2, #8
 8001dac:	409a      	lsls	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01a      	beq.n	8001dec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0204 	bic.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2208      	movs	r2, #8
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2204      	movs	r2, #4
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2204      	movs	r2, #4
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d043      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03c      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d024      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e01f      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0208 	bic.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 808f 	beq.w	8002020 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8087 	beq.w	8002020 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2220      	movs	r2, #32
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d136      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0216 	bic.w	r2, r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x1da>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0208 	bic.w	r2, r2, #8
 8001f68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	223f      	movs	r2, #63	; 0x3f
 8001f70:	409a      	lsls	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07e      	beq.n	800208c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
        }
        return;
 8001f96:	e079      	b.n	800208c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01d      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e02c      	b.n	8002020 <HAL_DMA_IRQHandler+0x2a0>
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d023      	beq.n	8002020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
 8001fe0:	e01e      	b.n	8002020 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	2b00      	cmp	r3, #0
 8002026:	d032      	beq.n	800208e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2205      	movs	r2, #5
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	d307      	bcc.n	8002068 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f2      	bne.n	800204c <HAL_DMA_IRQHandler+0x2cc>
 8002066:	e000      	b.n	800206a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002068:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e000      	b.n	800208e <HAL_DMA_IRQHandler+0x30e>
        return;
 800208c:	bf00      	nop
    }
  }
}
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d108      	bne.n	80020d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d2:	e007      	b.n	80020e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b10      	subs	r3, #16
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <DMA_CalcBaseAndBitshift+0x64>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <DMA_CalcBaseAndBitshift+0x68>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d909      	bls.n	8002132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
 8002130:	e007      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08004098 	.word	0x08004098

0800215c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d856      	bhi.n	800222a <DMA_CheckFifoParam+0xce>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <DMA_CheckFifoParam+0x28>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	080021a7 	.word	0x080021a7
 800218c:	08002195 	.word	0x08002195
 8002190:	0800222b 	.word	0x0800222b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d046      	beq.n	800222e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e043      	b.n	800222e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ae:	d140      	bne.n	8002232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e03d      	b.n	8002232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d121      	bne.n	8002204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d837      	bhi.n	8002236 <DMA_CheckFifoParam+0xda>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x70>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e3 	.word	0x080021e3
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	080021f5 	.word	0x080021f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e030      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d025      	beq.n	800223a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f2:	e022      	b.n	800223a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002202:	e01c      	b.n	800223e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d903      	bls.n	8002212 <DMA_CheckFifoParam+0xb6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002210:	e018      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      break;
 8002216:	e015      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e00b      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 800222a:	bf00      	nop
 800222c:	e00a      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e008      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e006      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e004      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e002      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;   
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
    }
  } 
  
  return status; 
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e159      	b.n	8002524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8148 	bne.w	800251e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d130      	bne.n	8002308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a2 	beq.w	800251e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b57      	ldr	r3, [pc, #348]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_GPIO_Init+0x2ec>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x202>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_GPIO_Init+0x2f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x1fe>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a47      	ldr	r2, [pc, #284]	; (800254c <HAL_GPIO_Init+0x2f8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x1fa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a46      	ldr	r2, [pc, #280]	; (8002550 <HAL_GPIO_Init+0x2fc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x1f6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a45      	ldr	r2, [pc, #276]	; (8002554 <HAL_GPIO_Init+0x300>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x1f2>
 8002442:	2304      	movs	r3, #4
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002446:	2307      	movs	r3, #7
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x204>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x204>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x2ec>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_GPIO_Init+0x304>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249a:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <HAL_GPIO_Init+0x304>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_GPIO_Init+0x304>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f aea2 	bls.w	8002270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e267      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d075      	beq.n	8002666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b85      	ldr	r3, [pc, #532]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b7e      	ldr	r3, [pc, #504]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e242      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x74>
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b70      	ldr	r3, [pc, #448]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6f      	ldr	r2, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025f4:	4b69      	ldr	r3, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a68      	ldr	r2, [pc, #416]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff f8fe 	bl	8001814 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff f8fa 	bl	8001814 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e207      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff f8ea 	bl	8001814 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff f8e6 	bl	8001814 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1f3      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <HAL_RCC_OscConfig+0x244>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7ff f89f 	bl	8001814 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff f89b 	bl	8001814 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a8      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4925      	ldr	r1, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_OscConfig+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff f87e 	bl	8001814 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff f87a 	bl	8001814 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e187      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_RCC_OscConfig+0x248>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff f85e 	bl	8001814 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff f85a 	bl	8001814 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e167      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x240>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x200>
 800277a:	e01b      	b.n	80027b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_OscConfig+0x248>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff f847 	bl	8001814 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e00e      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278a:	f7ff f843 	bl	8001814 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d907      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e150      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ea      	bne.n	800278a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8097 	beq.w	80028f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a7c      	ldr	r2, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b77      	ldr	r3, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b74      	ldr	r3, [pc, #464]	; (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a73      	ldr	r2, [pc, #460]	; (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7ff f803 	bl	8001814 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe ffff 	bl	8001814 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ea>
 8002838:	4b64      	ldr	r3, [pc, #400]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x30c>
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	4b55      	ldr	r3, [pc, #340]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a54      	ldr	r2, [pc, #336]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe ffc4 	bl	8001814 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe ffc0 	bl	8001814 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0cb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4b49      	ldr	r3, [pc, #292]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ee      	beq.n	8002890 <HAL_RCC_OscConfig+0x334>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe ffae 	bl	8001814 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe ffaa 	bl	8001814 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0b5      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a1 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fa:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d05c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d141      	bne.n	8002992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ff7e 	bl	8001814 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe ff7a 	bl	8001814 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e087      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe ff53 	bl	8001814 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe ff4f 	bl	8001814 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e05c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x416>
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe ff3c 	bl	8001814 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe ff38 	bl	8001814 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x4ec>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fe6a 	bl	8001814 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fe66 	bl	8001814 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fdca 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08004080 	.word	0x08004080
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c1c:	b090      	sub	sp, #64	; 0x40
 8002c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
 8002c24:	2300      	movs	r3, #0
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c28:	2300      	movs	r3, #0
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f200 80a1 	bhi.w	8002d84 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x34>
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4a:	e09b      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c50:	e09b      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c56:	e098      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c58:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c80:	2100      	movs	r1, #0
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c84:	fb03 f201 	mul.w	r2, r3, r1
 8002c88:	2300      	movs	r3, #0
 8002c8a:	fb00 f303 	mul.w	r3, r0, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c92:	fba0 1202 	umull	r1, r2, r0, r2
 8002c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c98:	460a      	mov	r2, r1
 8002c9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9e:	4413      	add	r3, r2
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	61fa      	str	r2, [r7, #28]
 8002caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb2:	f7fd feaf 	bl	8000a14 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbe:	e053      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc0:	4b35      	ldr	r3, [pc, #212]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	617a      	str	r2, [r7, #20]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cd2:	f04f 0b00 	mov.w	fp, #0
 8002cd6:	4652      	mov	r2, sl
 8002cd8:	465b      	mov	r3, fp
 8002cda:	f04f 0000 	mov.w	r0, #0
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	0159      	lsls	r1, r3, #5
 8002ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce8:	0150      	lsls	r0, r2, #5
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	ebb2 080a 	subs.w	r8, r2, sl
 8002cf2:	eb63 090b 	sbc.w	r9, r3, fp
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d0a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d0e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	00eb      	lsls	r3, r5, #3
 8002d1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d20:	00e2      	lsls	r2, r4, #3
 8002d22:	4614      	mov	r4, r2
 8002d24:	461d      	mov	r5, r3
 8002d26:	eb14 030a 	adds.w	r3, r4, sl
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	eb45 030b 	adc.w	r3, r5, fp
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	028b      	lsls	r3, r1, #10
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d48:	4621      	mov	r1, r4
 8002d4a:	028a      	lsls	r2, r1, #10
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	2200      	movs	r2, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	60fa      	str	r2, [r7, #12]
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	f7fd fe5a 	bl	8000a14 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	3301      	adds	r3, #1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3740      	adds	r7, #64	; 0x40
 8002d90:	46bd      	mov	sp, r7
 8002d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	017d7840 	.word	0x017d7840

08002da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff0 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a9b      	lsrs	r3, r3, #10
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08004090 	.word	0x08004090

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de8:	f7ff ffdc 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0b5b      	lsrs	r3, r3, #13
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08004090 	.word	0x08004090

08002e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e03f      	b.n	8002e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe f8f8 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fe69 	bl	8003b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d11d      	bne.n	8002efc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_UART_Receive_DMA+0x26>
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e016      	b.n	8002efe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Receive_DMA+0x38>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e00f      	b.n	8002efe <HAL_UART_Receive_DMA+0x58>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fbb8 	bl	8003668 <UART_Start_Receive_DMA>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	e000      	b.n	8002efe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0ba      	sub	sp, #232	; 0xe8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_UART_IRQHandler+0x66>
 8002f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fd23 	bl	80039b2 <UART_Receive_IT>
      return;
 8002f6c:	e256      	b.n	800341c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80de 	beq.w	8003134 <HAL_UART_IRQHandler+0x22c>
 8002f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80d1 	beq.w	8003134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_UART_IRQHandler+0xae>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_UART_IRQHandler+0xd2>
 8002fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
 8002fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0204 	orr.w	r2, r3, #4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0208 	orr.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 81ed 	beq.w	8003412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x14e>
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fcae 	bl	80039b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_UART_IRQHandler+0x17a>
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04f      	beq.n	8003122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fbb6 	bl	80037f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d141      	bne.n	800311a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1d9      	bne.n	8003096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4a7d      	ldr	r2, [pc, #500]	; (80032e4 <HAL_UART_IRQHandler+0x3dc>)
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fe20 	bl	8001d3c <HAL_DMA_Abort_IT>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800310c:	4610      	mov	r0, r2
 800310e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e00e      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f99a 	bl	800344c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003118:	e00a      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f996 	bl	800344c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	e006      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f992 	bl	800344c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800312e:	e170      	b.n	8003412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	bf00      	nop
    return;
 8003132:	e16e      	b.n	8003412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 814a 	bne.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8143 	beq.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 813c 	beq.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	f040 80b4 	bne.w	80032e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800318c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8140 	beq.w	8003416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800319e:	429a      	cmp	r2, r3
 80031a0:	f080 8139 	bcs.w	8003416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	f000 8088 	beq.w	80032ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1d9      	bne.n	80031ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3314      	adds	r3, #20
 8003226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800322a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800322e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e1      	bne.n	8003206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800326c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fcc9 	bl	8001c5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8c0 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e0:	e099      	b.n	8003416 <HAL_UART_IRQHandler+0x50e>
 80032e2:	bf00      	nop
 80032e4:	080038bb 	.word	0x080038bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808b 	beq.w	800341a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8086 	beq.w	800341a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003332:	647a      	str	r2, [r7, #68]	; 0x44
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	623b      	str	r3, [r7, #32]
   return(result);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336a:	633a      	str	r2, [r7, #48]	; 0x30
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	60fb      	str	r3, [r7, #12]
   return(result);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	617b      	str	r3, [r7, #20]
   return(result);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e3      	bne.n	800338c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f848 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d0:	e023      	b.n	800341a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x4ea>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa79 	bl	80038e2 <UART_Transmit_IT>
    return;
 80033f0:	e014      	b.n	800341c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <HAL_UART_IRQHandler+0x514>
 80033fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fab9 	bl	8003982 <UART_EndTransmit_IT>
    return;
 8003410:	e004      	b.n	800341c <HAL_UART_IRQHandler+0x514>
    return;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_UART_IRQHandler+0x514>
      return;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_UART_IRQHandler+0x514>
      return;
 800341a:	bf00      	nop
  }
}
 800341c:	37e8      	adds	r7, #232	; 0xe8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b09c      	sub	sp, #112	; 0x70
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d172      	bne.n	800357a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003496:	2200      	movs	r2, #0
 8003498:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	667b      	str	r3, [r7, #100]	; 0x64
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3314      	adds	r3, #20
 80034ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80034ee:	647a      	str	r2, [r7, #68]	; 0x44
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e5      	bne.n	80034ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	623b      	str	r3, [r7, #32]
   return(result);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003518:	663b      	str	r3, [r7, #96]	; 0x60
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003522:	633a      	str	r2, [r7, #48]	; 0x30
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e5      	bne.n	8003502 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	2b01      	cmp	r3, #1
 8003544:	d119      	bne.n	800357a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	60fb      	str	r3, [r7, #12]
   return(result);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0310 	bic.w	r3, r3, #16
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	617b      	str	r3, [r7, #20]
   return(result);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	2b01      	cmp	r3, #1
 8003580:	d106      	bne.n	8003590 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800358a:	f7ff ff69 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800358e:	e002      	b.n	8003596 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003590:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003592:	f7fd fc8d 	bl	8000eb0 <HAL_UART_RxCpltCallback>
}
 8003596:	bf00      	nop
 8003598:	3770      	adds	r7, #112	; 0x70
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d108      	bne.n	80035c6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff4e 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035c4:	e002      	b.n	80035cc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff ff36 	bl	8003438 <HAL_UART_RxHalfCpltCallback>
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b21      	cmp	r3, #33	; 0x21
 8003606:	d108      	bne.n	800361a <UART_DMAError+0x46>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003614:	68b8      	ldr	r0, [r7, #8]
 8003616:	f000 f8c5 	bl	80037a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b22      	cmp	r3, #34	; 0x22
 800363a:	d108      	bne.n	800364e <UART_DMAError+0x7a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003648:	68b8      	ldr	r0, [r7, #8]
 800364a:	f000 f8d3 	bl	80037f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f7ff fef6 	bl	800344c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b098      	sub	sp, #96	; 0x60
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	; 0x22
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	4a40      	ldr	r2, [pc, #256]	; (8003798 <UART_Start_Receive_DMA+0x130>)
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	4a3f      	ldr	r2, [pc, #252]	; (800379c <UART_Start_Receive_DMA+0x134>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	4a3e      	ldr	r2, [pc, #248]	; (80037a0 <UART_Start_Receive_DMA+0x138>)
 80036a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	2200      	movs	r2, #0
 80036ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036b0:	f107 0308 	add.w	r3, r7, #8
 80036b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	f7fe fa70 	bl	8001bac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d019      	beq.n	8003726 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	65bb      	str	r3, [r7, #88]	; 0x58
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003712:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	657b      	str	r3, [r7, #84]	; 0x54
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003746:	63ba      	str	r2, [r7, #56]	; 0x38
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800374c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	617b      	str	r3, [r7, #20]
   return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003770:	653b      	str	r3, [r7, #80]	; 0x50
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800377a:	627a      	str	r2, [r7, #36]	; 0x24
 800377c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6a39      	ldr	r1, [r7, #32]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	61fb      	str	r3, [r7, #28]
   return(result);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3760      	adds	r7, #96	; 0x60
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	08003479 	.word	0x08003479
 800379c:	0800359f 	.word	0x0800359f
 80037a0:	080035d5 	.word	0x080035d5

080037a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	61ba      	str	r2, [r7, #24]
 80037ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037e8:	bf00      	nop
 80037ea:	3724      	adds	r7, #36	; 0x24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b095      	sub	sp, #84	; 0x54
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800381c:	643a      	str	r2, [r7, #64]	; 0x40
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	64bb      	str	r3, [r7, #72]	; 0x48
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	2b01      	cmp	r3, #1
 800386a:	d119      	bne.n	80038a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	60bb      	str	r3, [r7, #8]
   return(result);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0310 	bic.w	r3, r3, #16
 8003882:	647b      	str	r3, [r7, #68]	; 0x44
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800388c:	61ba      	str	r2, [r7, #24]
 800388e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	613b      	str	r3, [r7, #16]
   return(result);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e5      	bne.n	800386c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038ae:	bf00      	nop
 80038b0:	3754      	adds	r7, #84	; 0x54
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff fdb9 	bl	800344c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b21      	cmp	r3, #33	; 0x21
 80038f4:	d13e      	bne.n	8003974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d114      	bne.n	800392a <UART_Transmit_IT+0x48>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]
 8003928:	e008      	b.n	800393c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6211      	str	r1, [r2, #32]
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4619      	mov	r1, r3
 800394a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800395e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fd3e 	bl	8003424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08c      	sub	sp, #48	; 0x30
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b22      	cmp	r3, #34	; 0x22
 80039c4:	f040 80ab 	bne.w	8003b1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	d117      	bne.n	8003a02 <UART_Receive_IT+0x50>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d113      	bne.n	8003a02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	1c9a      	adds	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003a00:	e026      	b.n	8003a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d007      	beq.n	8003a26 <UART_Receive_IT+0x74>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <UART_Receive_IT+0x82>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e008      	b.n	8003a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d15a      	bne.n	8003b1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0220 	bic.w	r2, r2, #32
 8003a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d135      	bne.n	8003b10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f023 0310 	bic.w	r3, r3, #16
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	623a      	str	r2, [r7, #32]
 8003acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e5      	bne.n	8003aaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d10a      	bne.n	8003b02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fca9 	bl	8003460 <HAL_UARTEx_RxEventCallback>
 8003b0e:	e002      	b.n	8003b16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fd f9cd 	bl	8000eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e002      	b.n	8003b20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3730      	adds	r7, #48	; 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b0c0      	sub	sp, #256	; 0x100
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	ea40 0301 	orr.w	r3, r0, r1
 8003b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b80:	f021 010c 	bic.w	r1, r1, #12
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba2:	6999      	ldr	r1, [r3, #24]
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	ea40 0301 	orr.w	r3, r0, r1
 8003bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b8f      	ldr	r3, [pc, #572]	; (8003df4 <UART_SetConfig+0x2cc>)
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d005      	beq.n	8003bc8 <UART_SetConfig+0xa0>
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <UART_SetConfig+0x2d0>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d104      	bne.n	8003bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7ff f90c 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bd0:	e003      	b.n	8003bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bd2:	f7ff f8f3 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8003bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be4:	f040 810c 	bne.w	8003e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	1891      	adds	r1, r2, r2
 8003c00:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c02:	415b      	adcs	r3, r3
 8003c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	eb12 0801 	adds.w	r8, r2, r1
 8003c10:	4629      	mov	r1, r5
 8003c12:	eb43 0901 	adc.w	r9, r3, r1
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2a:	4690      	mov	r8, r2
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	eb18 0303 	adds.w	r3, r8, r3
 8003c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c38:	462b      	mov	r3, r5
 8003c3a:	eb49 0303 	adc.w	r3, r9, r3
 8003c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c56:	460b      	mov	r3, r1
 8003c58:	18db      	adds	r3, r3, r3
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	657b      	str	r3, [r7, #84]	; 0x54
 8003c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c6c:	f7fc fed2 	bl	8000a14 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003c76:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	011c      	lsls	r4, r3, #4
 8003c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc0:	4692      	mov	sl, r2
 8003cc2:	469b      	mov	fp, r3
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cec:	460b      	mov	r3, r1
 8003cee:	18db      	adds	r3, r3, r3
 8003cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d02:	f7fc fe87 	bl	8000a14 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2264      	movs	r2, #100	; 0x64
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	1acb      	subs	r3, r1, r3
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003d24:	fba3 2302 	umull	r2, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d30:	441c      	add	r4, r3
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	1891      	adds	r1, r2, r2
 8003d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d4c:	415b      	adcs	r3, r3
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d54:	4641      	mov	r1, r8
 8003d56:	1851      	adds	r1, r2, r1
 8003d58:	6339      	str	r1, [r7, #48]	; 0x30
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4651      	mov	r1, sl
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4651      	mov	r1, sl
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4642      	mov	r2, r8
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d88:	464b      	mov	r3, r9
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003da0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003da8:	460b      	mov	r3, r1
 8003daa:	18db      	adds	r3, r3, r3
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dae:	4613      	mov	r3, r2
 8003db0:	eb42 0303 	adc.w	r3, r2, r3
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dbe:	f7fc fe29 	bl	8000a14 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	; 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	3332      	adds	r3, #50	; 0x32
 8003dda:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 0207 	and.w	r2, r3, #7
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4422      	add	r2, r4
 8003dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003df0:	e105      	b.n	8003ffe <UART_SetConfig+0x4d6>
 8003df2:	bf00      	nop
 8003df4:	40011000 	.word	0x40011000
 8003df8:	40011400 	.word	0x40011400
 8003dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e12:	4642      	mov	r2, r8
 8003e14:	464b      	mov	r3, r9
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	6239      	str	r1, [r7, #32]
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e22:	4641      	mov	r1, r8
 8003e24:	1854      	adds	r4, r2, r1
 8003e26:	4649      	mov	r1, r9
 8003e28:	eb43 0501 	adc.w	r5, r3, r1
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	00eb      	lsls	r3, r5, #3
 8003e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3a:	00e2      	lsls	r2, r4, #3
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	461d      	mov	r5, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	18e3      	adds	r3, r4, r3
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e48:	464b      	mov	r3, r9
 8003e4a:	eb45 0303 	adc.w	r3, r5, r3
 8003e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e6e:	4629      	mov	r1, r5
 8003e70:	008b      	lsls	r3, r1, #2
 8003e72:	4621      	mov	r1, r4
 8003e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e78:	4621      	mov	r1, r4
 8003e7a:	008a      	lsls	r2, r1, #2
 8003e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e80:	f7fc fdc8 	bl	8000a14 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4b60      	ldr	r3, [pc, #384]	; (800400c <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	011c      	lsls	r4, r3, #4
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	61b9      	str	r1, [r7, #24]
 8003eac:	415b      	adcs	r3, r3
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6139      	str	r1, [r7, #16]
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003efe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	4641      	mov	r1, r8
 8003f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f16:	4641      	mov	r1, r8
 8003f18:	008a      	lsls	r2, r1, #2
 8003f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f1e:	f7fc fd79 	bl	8000a14 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <UART_SetConfig+0x4e4>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a34      	ldr	r2, [pc, #208]	; (800400c <UART_SetConfig+0x4e4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f46:	441c      	add	r4, r3
 8003f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f50:	677a      	str	r2, [r7, #116]	; 0x74
 8003f52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f56:	4642      	mov	r2, r8
 8003f58:	464b      	mov	r3, r9
 8003f5a:	1891      	adds	r1, r2, r2
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f66:	4641      	mov	r1, r8
 8003f68:	1851      	adds	r1, r2, r1
 8003f6a:	6039      	str	r1, [r7, #0]
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	414b      	adcs	r3, r1
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f7e:	4659      	mov	r1, fp
 8003f80:	00cb      	lsls	r3, r1, #3
 8003f82:	4651      	mov	r1, sl
 8003f84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f88:	4651      	mov	r1, sl
 8003f8a:	00ca      	lsls	r2, r1, #3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4603      	mov	r3, r0
 8003f92:	4642      	mov	r2, r8
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	663b      	str	r3, [r7, #96]	; 0x60
 8003fac:	667a      	str	r2, [r7, #100]	; 0x64
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fba:	4649      	mov	r1, r9
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	008a      	lsls	r2, r1, #2
 8003fc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fcc:	f7fc fd22 	bl	8000a14 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <UART_SetConfig+0x4e4>)
 8003fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2164      	movs	r1, #100	; 0x64
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <UART_SetConfig+0x4e4>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4422      	add	r2, r4
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	bf00      	nop
 8004000:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004004:	46bd      	mov	sp, r7
 8004006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400a:	bf00      	nop
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f820 	bl	8004068 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	080040a8 	.word	0x080040a8
 800404c:	080040a8 	.word	0x080040a8
 8004050:	080040a8 	.word	0x080040a8
 8004054:	080040ac 	.word	0x080040ac

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr
